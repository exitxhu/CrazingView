// <auto-generated />
using System;
using CrazingView.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrazingView.Migrations
{
    [DbContext(typeof(CrazyContext))]
    partial class CrazyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrazingView.Db.Entities.Configuraiton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChunkMaxCount")
                        .HasColumnType("int");

                    b.Property<int>("SessionTimeout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Configuraitons");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.Record", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("StrategyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.Result", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("GrossLoss")
                        .HasColumnType("float");

                    b.Property<double>("GrossProfit")
                        .HasColumnType("float");

                    b.Property<double>("MaxDrawdown")
                        .HasColumnType("float");

                    b.Property<double>("NetProfit")
                        .HasColumnType("float");

                    b.Property<string>("RawValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StrategyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StrategyId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChunkCount")
                        .HasColumnType("int");

                    b.Property<long>("ChunkEndId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChunkStartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PairName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("StrategyId")
                        .HasColumnType("bigint");

                    b.Property<string>("TabId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChunkEndId");

                    b.HasIndex("ChunkStartId");

                    b.HasIndex("StrategyId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.SessionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionLogs");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.Strategy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplyTimeout")
                        .HasColumnType("int");

                    b.Property<int>("InputCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PairName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Strategies");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.StrategyInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("IncreaseStep")
                        .HasColumnType("float");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StrategyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("StrategyInputs");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.Record", b =>
                {
                    b.HasOne("CrazingView.Db.Entities.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.Result", b =>
                {
                    b.HasOne("CrazingView.Db.Entities.Record", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CrazingView.Db.Entities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CrazingView.Db.Entities.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Record");

                    b.Navigation("Session");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.Session", b =>
                {
                    b.HasOne("CrazingView.Db.Entities.Record", "ChunkEnd")
                        .WithMany()
                        .HasForeignKey("ChunkEndId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CrazingView.Db.Entities.Record", "ChunkStart")
                        .WithMany()
                        .HasForeignKey("ChunkStartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CrazingView.Db.Entities.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChunkEnd");

                    b.Navigation("ChunkStart");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.SessionLog", b =>
                {
                    b.HasOne("CrazingView.Db.Entities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CrazingView.Db.Entities.StrategyInput", b =>
                {
                    b.HasOne("CrazingView.Db.Entities.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });
#pragma warning restore 612, 618
        }
    }
}
